Estimate appropriate force and directionality for each thruster for the quad to reach a position and orientation
- as opposed to setting individual targets for each thruster: simply doesn't work

Should be able to rotate position without moving the quad, simplifies the structure. Get this working, then factor position back in.

Determine total force required to moved object to a position and to rotate to a position

calculate force vectors needed to reach rotation and position: acceleration in the x, y, z and angular acceleration about the x, y, z axes
 -> divide vector to sub positional force to reach rotation and position: force split across 4 different thrust vectors
 -> divide vector to provide individual directionality and force separately: force split into angular direction in the x and y, then force in the z

 mass = 0.04kg - without integrating surface, guess 0.01kg for where it matters
 radius = 9.75cm = 0.0975m

 kv = rpm per volt: 12* 2500 = 30000 rpm

 inertia = mass * r^2 = 0.00038025  | 0.0000950625
 angular velocity: 30,000 rpm = 3141.59265 rads/second     |     5000rpm = 523.59877
 Angular momentum = inertia * angular velocity = 1.19459 kgm^2 / sec   |   0.29864765	|	0.04977

 torque = 60 rad/s * 1.19459

 torque = 1.0472 rad/s * 0.2986476 = 17.9188 kg/m * 9.81 = 175.723 ozin MAX -> 0.31724/3.11212 nm
 torque = 1.0472 rad/s * 0.0497746 =  2.9865 kg/m * 9.81 =  29.287 ozin MIN -> 0.05212/0.51134 nm

 torque = swiveling rate * angular momentum


////////////////////////////////////
Count in gyroscopic precession

Twisting an arm induces torque on the quad itself, rotating the quadcopter relative to the ground
- relative to the quad the arm is being twisted to the specified angle

X Transitions to multiple angles. For instance (45, 90, 0) instead of (45, 0, 0)

X Rotation matrix about Y axis only for thrusters to modify which relative direction it should be providing thrust
-Moving to a position on one axis while at the original rotation can be done through moving only one joint
-Moving to a position on one axis while at a different rotation about the Y axis is done through moving two joints
-Modify thrust vector computation

X Allow rotations up to and past 90 degrees about X and Z axes

X Set up feedback controllers such that they understand that when one other value changes it directly affects the other with a constant relationship
-rotating the X arm affects what will happen to the Y and the value can be known

X Thruster
-Feedback controller for determining the output in each individual dimension (TargetPosition, CurrentPosition)
-Second feedback controller layer for determining how much a change with the X or Z rotations will affect the Y output and automatically compensate
- this prevents the initial feedback controller from going haywire by automatically smoothing the output
-Drawing on desktop

X Add more delay to thruster movement and calibrate rotational/positional ADRCs

Fix quad display
-Rotation about Y axis is inverted
- Quad rotates opposite as to how it should 

Set up failsafes for dying engines
-when one fails, kill the opposite engine
-axis of rotation changes when motors die

Velocity is controlled by changing target position of quad, not through the thrust controller 
-stretched what ADRC was capable of

Detect agitated behavior and reset ADRCs to default
- Write chaotic motion solver
- smooth control given a chaotic state

X Correct rotation calculation after adjusting how it is calculated

X Allow rotations past 90 degrees
- translation becomes inverted when rotating past 90 degrees about the X dimension
- used only to compensate for rotations
- 90 degrees is the max control limit

Correct rotation calculation for on Z axis
- position simulation is incorrect, thrust outputs need manipulated
- position calculation needs to be modified to match new simulation

X All four props have rotational inertia
- use for differential thrust
- adjust output of diagonal motors, increase two by the same amount the other two are decreased
- each have the constant rotational inertia, factor and sum all of them for the rotational inertia
- the sum gives the rotational inertia for the quad about the vertical axis of the quad rotor
- each quad has rotational inertia (0, thrust, 0) or (0, -thrust, 0), rotate the thruster relative to the quad, then the quad relative to the origin rotation
- add to angular acceleration
- USE TO CONTROL ROTATION, do not redirect thrusters for rotation
- ADD TO SIMULATION FIRST
- ADD TO SOLVER SECOND

X Allow continuous rotation, no secondary solver. Fade perfectly

X Correct position calculation for gimbal lock

Allow rotations with multiple angles during gimbal lock


Thruster -> 2DOF -> Convert to quaternion, rotate quaternion by quadcopter quaternion
Thrust vector from quaternion?

Multiply quaternions to rotate


Replace ADRC with custom feedback control (SISO)
-direct automated tuning
-fourier analysis on input signal to estimate future state of the system based on previous state
-put in 4th dim
-stochastic control
-obtain solid results at one plant specification and scale up and down
-feedforward control
-use filtering methods for excluding rapid impulses in system state